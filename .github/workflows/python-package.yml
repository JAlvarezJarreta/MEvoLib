# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches:
      - main
      - version/2.0

  pull_request:
    types:
        - closed
    branches:
      - main
      - version/2.0

permissions:
    contents: write

env:
   RUN_DIR: ./

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

#    env:
#       MYPY_CMD: mypy --config-file pyproject.toml
#       PYLINT_CMD: pylint --rcfile pyproject.toml

#        PYLINT_CMD="pylint --rcfile pyproject.toml"
#        export PYLINT_CMD
#        $PYLINT_CMD mevolib
#        $PYLINT_CMD tests

#        MYPY_CMD="mypy --config-file pyproject.toml"
#        export MYPY_CMD
#        $MYPY_CMD mevolib
#        $MYPY_CMD tests
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv $RUN_DIR/venv
        source $RUN_DIR/venv/bin/activate
        pip install -e .[mevolib]

    - name: Pylint
      run: |
        pylint --rcfile pyproject.toml mevolib
        pylint --rcfile pyproject.toml tests
    - name: mypy
      run: |
        mypy --config-file pyproject.toml mevolib
        mypy --config-file pyproject.toml tests
    - name: black
      run: |
        black --config pyproject.toml --verbose --check .

  test:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Test with pytest
        run: |
          pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml

      - name: Archive code coverage results
        run: |
          coverage html -d $RUN_DIR/coverage
          coverage xml -o $RUN_DIR/coverage.xml
          genbadge coverage -i $RUN_DIR/coverage.xml -o $RUN_DIR/coverage/coverage-badge.svg
          coverage report
      # coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

